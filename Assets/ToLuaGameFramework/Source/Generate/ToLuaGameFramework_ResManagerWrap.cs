//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ToLuaGameFramework_ResManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ToLuaGameFramework.ResManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("StartUpdateABOnStartup", new LuaCSFunction(StartUpdateABOnStartup));
		L.RegFunction("IsABLoaded", new LuaCSFunction(IsABLoaded));
		L.RegFunction("UpdateABsByNames", new LuaCSFunction(UpdateABsByNames));
		L.RegFunction("PreloadLocalAssetBundles", new LuaCSFunction(PreloadLocalAssetBundles));
		L.RegFunction("UnloadAllAssetBundles", new LuaCSFunction(UnloadAllAssetBundles));
		L.RegFunction("SpawnPrefab", new LuaCSFunction(SpawnPrefab));
		L.RegFunction("SpawnPrefabAsyn", new LuaCSFunction(SpawnPrefabAsyn));
		L.RegFunction("OnSpawnDestroy", new LuaCSFunction(OnSpawnDestroy));
		L.RegFunction("LLoadBinaryAssetSyn", new LuaCSFunction(LLoadBinaryAssetSyn));
		L.RegFunction("LoadAssetSyn", new LuaCSFunction(LoadAssetSyn));
		L.RegFunction("ClearMemory", new LuaCSFunction(ClearMemory));
		L.RegFunction("__eq", new LuaCSFunction(op_Equality));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("instance", new LuaCSFunction(get_instance), new LuaCSFunction(set_instance));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartUpdateABOnStartup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ToLuaGameFramework.ResManager obj = (ToLuaGameFramework.ResManager)ToLua.CheckObject<ToLuaGameFramework.ResManager>(L, 1);
			obj.StartUpdateABOnStartup();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsABLoaded(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToLuaGameFramework.ResManager obj = (ToLuaGameFramework.ResManager)ToLua.CheckObject<ToLuaGameFramework.ResManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.IsABLoaded(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateABsByNames(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ToLuaGameFramework.ResManager obj = (ToLuaGameFramework.ResManager)ToLua.CheckObject<ToLuaGameFramework.ResManager>(L, 1);
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			System.Action<string,float,bool> arg1 = (System.Action<string,float,bool>)ToLua.CheckDelegate<System.Action<string,float,bool>>(L, 3);
			obj.UpdateABsByNames(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PreloadLocalAssetBundles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string[] arg0 = ToLua.CheckStringArray(L, 1);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 2);
			ToLuaGameFramework.ResManager.PreloadLocalAssetBundles(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadAllAssetBundles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToLuaGameFramework.ResManager obj = (ToLuaGameFramework.ResManager)ToLua.CheckObject<ToLuaGameFramework.ResManager>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.UnloadAllAssetBundles(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SpawnPrefab(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
				UnityEngine.GameObject o = ToLuaGameFramework.ResManager.SpawnPrefab(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				UnityEngine.GameObject o = ToLuaGameFramework.ResManager.SpawnPrefab(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				UnityEngine.GameObject o = ToLuaGameFramework.ResManager.SpawnPrefab(arg0, arg1, arg2, arg3);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToLuaGameFramework.ResManager.SpawnPrefab");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SpawnPrefabAsyn(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
				LuaFunction arg2 = ToLua.CheckLuaFunction(L, 3);
				ToLuaGameFramework.ResManager.SpawnPrefabAsyn(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
				LuaFunction arg2 = ToLua.CheckLuaFunction(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				ToLuaGameFramework.ResManager.SpawnPrefabAsyn(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
				LuaFunction arg2 = ToLua.CheckLuaFunction(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				bool arg4 = LuaDLL.luaL_checkboolean(L, 5);
				ToLuaGameFramework.ResManager.SpawnPrefabAsyn(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToLuaGameFramework.ResManager.SpawnPrefabAsyn");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSpawnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ToLuaGameFramework.ResManager obj = (ToLuaGameFramework.ResManager)ToLua.CheckObject<ToLuaGameFramework.ResManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.OnSpawnDestroy(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LLoadBinaryAssetSyn(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				byte[] o = ToLuaGameFramework.ResManager.LLoadBinaryAssetSyn(arg0);
				LuaDLL.tolua_pushlstring(L, o, o.Length);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				byte[] o = ToLuaGameFramework.ResManager.LLoadBinaryAssetSyn(arg0, arg1);
				LuaDLL.tolua_pushlstring(L, o, o.Length);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToLuaGameFramework.ResManager.LLoadBinaryAssetSyn");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAssetSyn(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.Object o = ToLuaGameFramework.ResManager.LoadAssetSyn(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Type arg0 = ToLua.CheckMonoType(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				UnityEngine.Object o = ToLuaGameFramework.ResManager.LoadAssetSyn(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToLuaGameFramework.ResManager.LoadAssetSyn");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearMemory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ToLuaGameFramework.ResManager obj = (ToLuaGameFramework.ResManager)ToLua.CheckObject<ToLuaGameFramework.ResManager>(L, 1);
			obj.ClearMemory();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, ToLuaGameFramework.ResManager.instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_instance(IntPtr L)
	{
		try
		{
			ToLuaGameFramework.ResManager arg0 = (ToLuaGameFramework.ResManager)ToLua.CheckObject<ToLuaGameFramework.ResManager>(L, 2);
			ToLuaGameFramework.ResManager.instance = arg0;
			ToLuaGameFramework.ResManager.instance = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

