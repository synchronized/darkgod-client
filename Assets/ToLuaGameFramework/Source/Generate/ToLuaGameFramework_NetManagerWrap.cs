//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ToLuaGameFramework_NetManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ToLuaGameFramework.NetManager), typeof(System.Object));
		L.RegFunction("RegisterReceiveEvent", new LuaCSFunction(RegisterReceiveEvent));
		L.RegFunction("DoUpdate", new LuaCSFunction(DoUpdate));
		L.RegFunction("DoClose", new LuaCSFunction(DoClose));
		L.RegFunction("CheckConnect", new LuaCSFunction(CheckConnect));
		L.RegFunction("SendConnect", new LuaCSFunction(SendConnect));
		L.RegFunction("CloseConnect", new LuaCSFunction(CloseConnect));
		L.RegFunction("IsConnected", new LuaCSFunction(IsConnected));
		L.RegFunction("SendMessage", new LuaCSFunction(SendMessage));
		L.RegFunction("AddEvent", new LuaCSFunction(AddEvent));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("Instance", new LuaCSFunction(get_Instance), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterReceiveEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToLuaGameFramework.NetManager obj = (ToLuaGameFramework.NetManager)ToLua.CheckObject<ToLuaGameFramework.NetManager>(L, 1);
			System.Action<byte[]> arg0 = (System.Action<byte[]>)ToLua.CheckDelegate<System.Action<byte[]>>(L, 2);
			obj.RegisterReceiveEvent(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ToLuaGameFramework.NetManager obj = (ToLuaGameFramework.NetManager)ToLua.CheckObject<ToLuaGameFramework.NetManager>(L, 1);
			obj.DoUpdate();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoClose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ToLuaGameFramework.NetManager obj = (ToLuaGameFramework.NetManager)ToLua.CheckObject<ToLuaGameFramework.NetManager>(L, 1);
			obj.DoClose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckConnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ToLuaGameFramework.NetManager obj = (ToLuaGameFramework.NetManager)ToLua.CheckObject<ToLuaGameFramework.NetManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			obj.CheckConnect(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendConnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ToLuaGameFramework.NetManager obj = (ToLuaGameFramework.NetManager)ToLua.CheckObject<ToLuaGameFramework.NetManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checkinteger(L, 3);
			obj.SendConnect(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseConnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ToLuaGameFramework.NetManager obj = (ToLuaGameFramework.NetManager)ToLua.CheckObject<ToLuaGameFramework.NetManager>(L, 1);
			obj.CloseConnect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsConnected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ToLuaGameFramework.NetManager obj = (ToLuaGameFramework.NetManager)ToLua.CheckObject<ToLuaGameFramework.NetManager>(L, 1);
			bool o = obj.IsConnected();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMessage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<ToLuaGameFramework.ByteBuffer>(L, 2))
			{
				ToLuaGameFramework.NetManager obj = (ToLuaGameFramework.NetManager)ToLua.CheckObject<ToLuaGameFramework.NetManager>(L, 1);
				ToLuaGameFramework.ByteBuffer arg0 = (ToLuaGameFramework.ByteBuffer)ToLua.ToObject(L, 2);
				obj.SendMessage(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<byte[]>(L, 2))
			{
				ToLuaGameFramework.NetManager obj = (ToLuaGameFramework.NetManager)ToLua.CheckObject<ToLuaGameFramework.NetManager>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.SendMessage(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToLuaGameFramework.NetManager.SendMessage");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToLuaGameFramework.NetManager obj = (ToLuaGameFramework.NetManager)ToLua.CheckObject<ToLuaGameFramework.NetManager>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.AddEvent(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, ToLuaGameFramework.NetManager.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

