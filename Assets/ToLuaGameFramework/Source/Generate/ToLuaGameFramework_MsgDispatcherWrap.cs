//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ToLuaGameFramework_MsgDispatcherWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ToLuaGameFramework.MsgDispatcher), typeof(System.Object));
		L.RegFunction("OnInit", new LuaCSFunction(OnInit));
		L.RegFunction("Register", new LuaCSFunction(_Register));
		L.RegFunction("UnRegister", new LuaCSFunction(UnRegister));
		L.RegFunction("Send", new LuaCSFunction(Send));
		L.RegFunction("Dispatcher", new LuaCSFunction(Dispatcher));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("Instance", new LuaCSFunction(get_Instance), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ToLuaGameFramework.MsgDispatcher obj = (ToLuaGameFramework.MsgDispatcher)ToLua.CheckObject<ToLuaGameFramework.MsgDispatcher>(L, 1);
			obj.OnInit();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Register(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ToLuaGameFramework.MsgDispatcher obj = (ToLuaGameFramework.MsgDispatcher)ToLua.CheckObject<ToLuaGameFramework.MsgDispatcher>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<byte[]> arg1 = (System.Action<byte[]>)ToLua.CheckDelegate<System.Action<byte[]>>(L, 3);
			obj.Register(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnRegister(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ToLuaGameFramework.MsgDispatcher obj = (ToLuaGameFramework.MsgDispatcher)ToLua.CheckObject<ToLuaGameFramework.MsgDispatcher>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Action<byte[]> arg1 = (System.Action<byte[]>)ToLua.CheckDelegate<System.Action<byte[]>>(L, 3);
			obj.UnRegister(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ToLuaGameFramework.MsgDispatcher obj = (ToLuaGameFramework.MsgDispatcher)ToLua.CheckObject<ToLuaGameFramework.MsgDispatcher>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
			bool o = obj.Send(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispatcher(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToLuaGameFramework.MsgDispatcher obj = (ToLuaGameFramework.MsgDispatcher)ToLua.CheckObject<ToLuaGameFramework.MsgDispatcher>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.Dispatcher(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, ToLuaGameFramework.MsgDispatcher.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

